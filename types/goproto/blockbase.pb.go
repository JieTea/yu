// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1-devel
// 	protoc        v3.13.0
// source: blockbase.proto

package goproto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type EventsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Events []*Event `protobuf:"bytes,1,rep,name=Events,proto3" json:"Events,omitempty"`
}

func (x *EventsRequest) Reset() {
	*x = EventsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blockbase_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventsRequest) ProtoMessage() {}

func (x *EventsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_blockbase_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventsRequest.ProtoReflect.Descriptor instead.
func (*EventsRequest) Descriptor() ([]byte, []int) {
	return file_blockbase_proto_rawDescGZIP(), []int{0}
}

func (x *EventsRequest) GetEvents() []*Event {
	if x != nil {
		return x.Events
	}
	return nil
}

type EventsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Events []*Event `protobuf:"bytes,1,rep,name=Events,proto3" json:"Events,omitempty"`
	Error  string   `protobuf:"bytes,2,opt,name=Error,proto3" json:"Error,omitempty"`
}

func (x *EventsResponse) Reset() {
	*x = EventsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blockbase_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventsResponse) ProtoMessage() {}

func (x *EventsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_blockbase_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventsResponse.ProtoReflect.Descriptor instead.
func (*EventsResponse) Descriptor() ([]byte, []int) {
	return file_blockbase_proto_rawDescGZIP(), []int{1}
}

func (x *EventsResponse) GetEvents() []*Event {
	if x != nil {
		return x.Events
	}
	return nil
}

func (x *EventsResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

type ErrorsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Errors []*Error `protobuf:"bytes,1,rep,name=Errors,proto3" json:"Errors,omitempty"`
	Error  string   `protobuf:"bytes,2,opt,name=Error,proto3" json:"Error,omitempty"`
}

func (x *ErrorsResponse) Reset() {
	*x = ErrorsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blockbase_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ErrorsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ErrorsResponse) ProtoMessage() {}

func (x *ErrorsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_blockbase_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ErrorsResponse.ProtoReflect.Descriptor instead.
func (*ErrorsResponse) Descriptor() ([]byte, []int) {
	return file_blockbase_proto_rawDescGZIP(), []int{2}
}

func (x *ErrorsResponse) GetErrors() []*Error {
	if x != nil {
		return x.Errors
	}
	return nil
}

func (x *ErrorsResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

var File_blockbase_proto protoreflect.FileDescriptor

var file_blockbase_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x09, 0x74, 0x78, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0c, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x10, 0x62, 0x61, 0x73, 0x65,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x2f, 0x0a, 0x0d,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a,
	0x06, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x06, 0x2e,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x06, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x46, 0x0a,
	0x0e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x1e, 0x0a, 0x06, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x06, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x06, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12,
	0x14, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x46, 0x0a, 0x0e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1e, 0x0a, 0x06, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52,
	0x06, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x32, 0x9f, 0x02,
	0x0a, 0x09, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x42, 0x61, 0x73, 0x65, 0x12, 0x20, 0x0a, 0x06, 0x47,
	0x65, 0x74, 0x54, 0x78, 0x6e, 0x12, 0x08, 0x2e, 0x54, 0x78, 0x6e, 0x48, 0x61, 0x73, 0x68, 0x1a,
	0x0c, 0x2e, 0x54, 0x78, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1a, 0x0a,
	0x06, 0x53, 0x65, 0x74, 0x54, 0x78, 0x6e, 0x12, 0x0a, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64,
	0x54, 0x78, 0x6e, 0x1a, 0x04, 0x2e, 0x45, 0x72, 0x72, 0x12, 0x24, 0x0a, 0x07, 0x47, 0x65, 0x74,
	0x54, 0x78, 0x6e, 0x73, 0x12, 0x0a, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68,
	0x1a, 0x0d, 0x2e, 0x54, 0x78, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x1d, 0x0a, 0x07, 0x53, 0x65, 0x74, 0x54, 0x78, 0x6e, 0x73, 0x12, 0x0c, 0x2e, 0x54, 0x78, 0x6e,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x04, 0x2e, 0x45, 0x72, 0x72, 0x12, 0x28,
	0x0a, 0x09, 0x47, 0x65, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x0a, 0x2e, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x1a, 0x0f, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x21, 0x0a, 0x09, 0x53, 0x65, 0x74, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x0e, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x04, 0x2e, 0x45, 0x72, 0x72, 0x12, 0x28, 0x0a, 0x09, 0x47,
	0x65, 0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x0a, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x48, 0x61, 0x73, 0x68, 0x1a, 0x0f, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x08, 0x53, 0x65, 0x74, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x12, 0x06, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x1a, 0x04, 0x2e, 0x45, 0x72, 0x72, 0x42,
	0x0b, 0x5a, 0x09, 0x2e, 0x2f, 0x67, 0x6f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_blockbase_proto_rawDescOnce sync.Once
	file_blockbase_proto_rawDescData = file_blockbase_proto_rawDesc
)

func file_blockbase_proto_rawDescGZIP() []byte {
	file_blockbase_proto_rawDescOnce.Do(func() {
		file_blockbase_proto_rawDescData = protoimpl.X.CompressGZIP(file_blockbase_proto_rawDescData)
	})
	return file_blockbase_proto_rawDescData
}

var file_blockbase_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_blockbase_proto_goTypes = []interface{}{
	(*EventsRequest)(nil),  // 0: EventsRequest
	(*EventsResponse)(nil), // 1: EventsResponse
	(*ErrorsResponse)(nil), // 2: ErrorsResponse
	(*Event)(nil),          // 3: Event
	(*Error)(nil),          // 4: Error
	(*TxnHash)(nil),        // 5: TxnHash
	(*SignedTxn)(nil),      // 6: SignedTxn
	(*BlockHash)(nil),      // 7: BlockHash
	(*TxnsRequest)(nil),    // 8: TxnsRequest
	(*TxnResponse)(nil),    // 9: TxnResponse
	(*Err)(nil),            // 10: Err
	(*TxnsResponse)(nil),   // 11: TxnsResponse
}
var file_blockbase_proto_depIdxs = []int32{
	3,  // 0: EventsRequest.Events:type_name -> Event
	3,  // 1: EventsResponse.Events:type_name -> Event
	4,  // 2: ErrorsResponse.Errors:type_name -> Error
	5,  // 3: BlockBase.GetTxn:input_type -> TxnHash
	6,  // 4: BlockBase.SetTxn:input_type -> SignedTxn
	7,  // 5: BlockBase.GetTxns:input_type -> BlockHash
	8,  // 6: BlockBase.SetTxns:input_type -> TxnsRequest
	7,  // 7: BlockBase.GetEvents:input_type -> BlockHash
	0,  // 8: BlockBase.SetEvents:input_type -> EventsRequest
	7,  // 9: BlockBase.GetErrors:input_type -> BlockHash
	4,  // 10: BlockBase.SetError:input_type -> Error
	9,  // 11: BlockBase.GetTxn:output_type -> TxnResponse
	10, // 12: BlockBase.SetTxn:output_type -> Err
	11, // 13: BlockBase.GetTxns:output_type -> TxnsResponse
	10, // 14: BlockBase.SetTxns:output_type -> Err
	1,  // 15: BlockBase.GetEvents:output_type -> EventsResponse
	10, // 16: BlockBase.SetEvents:output_type -> Err
	2,  // 17: BlockBase.GetErrors:output_type -> ErrorsResponse
	10, // 18: BlockBase.SetError:output_type -> Err
	11, // [11:19] is the sub-list for method output_type
	3,  // [3:11] is the sub-list for method input_type
	3,  // [3:3] is the sub-list for extension type_name
	3,  // [3:3] is the sub-list for extension extendee
	0,  // [0:3] is the sub-list for field type_name
}

func init() { file_blockbase_proto_init() }
func file_blockbase_proto_init() {
	if File_blockbase_proto != nil {
		return
	}
	file_txn_proto_init()
	file_result_proto_init()
	file_base_types_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_blockbase_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blockbase_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blockbase_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ErrorsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_blockbase_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_blockbase_proto_goTypes,
		DependencyIndexes: file_blockbase_proto_depIdxs,
		MessageInfos:      file_blockbase_proto_msgTypes,
	}.Build()
	File_blockbase_proto = out.File
	file_blockbase_proto_rawDesc = nil
	file_blockbase_proto_goTypes = nil
	file_blockbase_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// BlockBaseClient is the client API for BlockBase service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type BlockBaseClient interface {
	GetTxn(ctx context.Context, in *TxnHash, opts ...grpc.CallOption) (*TxnResponse, error)
	SetTxn(ctx context.Context, in *SignedTxn, opts ...grpc.CallOption) (*Err, error)
	GetTxns(ctx context.Context, in *BlockHash, opts ...grpc.CallOption) (*TxnsResponse, error)
	SetTxns(ctx context.Context, in *TxnsRequest, opts ...grpc.CallOption) (*Err, error)
	GetEvents(ctx context.Context, in *BlockHash, opts ...grpc.CallOption) (*EventsResponse, error)
	SetEvents(ctx context.Context, in *EventsRequest, opts ...grpc.CallOption) (*Err, error)
	GetErrors(ctx context.Context, in *BlockHash, opts ...grpc.CallOption) (*ErrorsResponse, error)
	SetError(ctx context.Context, in *Error, opts ...grpc.CallOption) (*Err, error)
}

type blockBaseClient struct {
	cc grpc.ClientConnInterface
}

func NewBlockBaseClient(cc grpc.ClientConnInterface) BlockBaseClient {
	return &blockBaseClient{cc}
}

func (c *blockBaseClient) GetTxn(ctx context.Context, in *TxnHash, opts ...grpc.CallOption) (*TxnResponse, error) {
	out := new(TxnResponse)
	err := c.cc.Invoke(ctx, "/BlockBase/GetTxn", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blockBaseClient) SetTxn(ctx context.Context, in *SignedTxn, opts ...grpc.CallOption) (*Err, error) {
	out := new(Err)
	err := c.cc.Invoke(ctx, "/BlockBase/SetTxn", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blockBaseClient) GetTxns(ctx context.Context, in *BlockHash, opts ...grpc.CallOption) (*TxnsResponse, error) {
	out := new(TxnsResponse)
	err := c.cc.Invoke(ctx, "/BlockBase/GetTxns", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blockBaseClient) SetTxns(ctx context.Context, in *TxnsRequest, opts ...grpc.CallOption) (*Err, error) {
	out := new(Err)
	err := c.cc.Invoke(ctx, "/BlockBase/SetTxns", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blockBaseClient) GetEvents(ctx context.Context, in *BlockHash, opts ...grpc.CallOption) (*EventsResponse, error) {
	out := new(EventsResponse)
	err := c.cc.Invoke(ctx, "/BlockBase/GetEvents", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blockBaseClient) SetEvents(ctx context.Context, in *EventsRequest, opts ...grpc.CallOption) (*Err, error) {
	out := new(Err)
	err := c.cc.Invoke(ctx, "/BlockBase/SetEvents", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blockBaseClient) GetErrors(ctx context.Context, in *BlockHash, opts ...grpc.CallOption) (*ErrorsResponse, error) {
	out := new(ErrorsResponse)
	err := c.cc.Invoke(ctx, "/BlockBase/GetErrors", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blockBaseClient) SetError(ctx context.Context, in *Error, opts ...grpc.CallOption) (*Err, error) {
	out := new(Err)
	err := c.cc.Invoke(ctx, "/BlockBase/SetError", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BlockBaseServer is the server API for BlockBase service.
type BlockBaseServer interface {
	GetTxn(context.Context, *TxnHash) (*TxnResponse, error)
	SetTxn(context.Context, *SignedTxn) (*Err, error)
	GetTxns(context.Context, *BlockHash) (*TxnsResponse, error)
	SetTxns(context.Context, *TxnsRequest) (*Err, error)
	GetEvents(context.Context, *BlockHash) (*EventsResponse, error)
	SetEvents(context.Context, *EventsRequest) (*Err, error)
	GetErrors(context.Context, *BlockHash) (*ErrorsResponse, error)
	SetError(context.Context, *Error) (*Err, error)
}

// UnimplementedBlockBaseServer can be embedded to have forward compatible implementations.
type UnimplementedBlockBaseServer struct {
}

func (*UnimplementedBlockBaseServer) GetTxn(context.Context, *TxnHash) (*TxnResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTxn not implemented")
}
func (*UnimplementedBlockBaseServer) SetTxn(context.Context, *SignedTxn) (*Err, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetTxn not implemented")
}
func (*UnimplementedBlockBaseServer) GetTxns(context.Context, *BlockHash) (*TxnsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTxns not implemented")
}
func (*UnimplementedBlockBaseServer) SetTxns(context.Context, *TxnsRequest) (*Err, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetTxns not implemented")
}
func (*UnimplementedBlockBaseServer) GetEvents(context.Context, *BlockHash) (*EventsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEvents not implemented")
}
func (*UnimplementedBlockBaseServer) SetEvents(context.Context, *EventsRequest) (*Err, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetEvents not implemented")
}
func (*UnimplementedBlockBaseServer) GetErrors(context.Context, *BlockHash) (*ErrorsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetErrors not implemented")
}
func (*UnimplementedBlockBaseServer) SetError(context.Context, *Error) (*Err, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetError not implemented")
}

func RegisterBlockBaseServer(s *grpc.Server, srv BlockBaseServer) {
	s.RegisterService(&_BlockBase_serviceDesc, srv)
}

func _BlockBase_GetTxn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TxnHash)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockBaseServer).GetTxn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BlockBase/GetTxn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockBaseServer).GetTxn(ctx, req.(*TxnHash))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlockBase_SetTxn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignedTxn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockBaseServer).SetTxn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BlockBase/SetTxn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockBaseServer).SetTxn(ctx, req.(*SignedTxn))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlockBase_GetTxns_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlockHash)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockBaseServer).GetTxns(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BlockBase/GetTxns",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockBaseServer).GetTxns(ctx, req.(*BlockHash))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlockBase_SetTxns_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TxnsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockBaseServer).SetTxns(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BlockBase/SetTxns",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockBaseServer).SetTxns(ctx, req.(*TxnsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlockBase_GetEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlockHash)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockBaseServer).GetEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BlockBase/GetEvents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockBaseServer).GetEvents(ctx, req.(*BlockHash))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlockBase_SetEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EventsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockBaseServer).SetEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BlockBase/SetEvents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockBaseServer).SetEvents(ctx, req.(*EventsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlockBase_GetErrors_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlockHash)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockBaseServer).GetErrors(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BlockBase/GetErrors",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockBaseServer).GetErrors(ctx, req.(*BlockHash))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlockBase_SetError_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Error)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockBaseServer).SetError(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BlockBase/SetError",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockBaseServer).SetError(ctx, req.(*Error))
	}
	return interceptor(ctx, in, info, handler)
}

var _BlockBase_serviceDesc = grpc.ServiceDesc{
	ServiceName: "BlockBase",
	HandlerType: (*BlockBaseServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTxn",
			Handler:    _BlockBase_GetTxn_Handler,
		},
		{
			MethodName: "SetTxn",
			Handler:    _BlockBase_SetTxn_Handler,
		},
		{
			MethodName: "GetTxns",
			Handler:    _BlockBase_GetTxns_Handler,
		},
		{
			MethodName: "SetTxns",
			Handler:    _BlockBase_SetTxns_Handler,
		},
		{
			MethodName: "GetEvents",
			Handler:    _BlockBase_GetEvents_Handler,
		},
		{
			MethodName: "SetEvents",
			Handler:    _BlockBase_SetEvents_Handler,
		},
		{
			MethodName: "GetErrors",
			Handler:    _BlockBase_GetErrors_Handler,
		},
		{
			MethodName: "SetError",
			Handler:    _BlockBase_SetError_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "blockbase.proto",
}
