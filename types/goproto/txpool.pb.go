// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1-devel
// 	protoc        v3.13.0
// source: txpool.proto

package goproto

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

var File_txpool_proto protoreflect.FileDescriptor

var file_txpool_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x74, 0x78, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x10, 0x62, 0x61, 0x73,
	0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x09, 0x74,
	0x78, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x32, 0xc0, 0x02, 0x0a, 0x06, 0x54, 0x78, 0x70,
	0x6f, 0x6f, 0x6c, 0x12, 0x28, 0x0a, 0x08, 0x50, 0x6f, 0x6f, 0x6c, 0x53, 0x69, 0x7a, 0x65, 0x12,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x04, 0x2e, 0x55, 0x36, 0x34, 0x12, 0x1d, 0x0a,
	0x09, 0x42, 0x61, 0x73, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x12, 0x0a, 0x2e, 0x53, 0x69, 0x67,
	0x6e, 0x65, 0x64, 0x54, 0x78, 0x6e, 0x1a, 0x04, 0x2e, 0x45, 0x72, 0x72, 0x12, 0x20, 0x0a, 0x0c,
	0x54, 0x72, 0x69, 0x70, 0x6f, 0x64, 0x73, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x12, 0x0a, 0x2e, 0x53,
	0x69, 0x67, 0x6e, 0x65, 0x64, 0x54, 0x78, 0x6e, 0x1a, 0x04, 0x2e, 0x45, 0x72, 0x72, 0x12, 0x22,
	0x0a, 0x0e, 0x4e, 0x65, 0x63, 0x65, 0x73, 0x73, 0x61, 0x72, 0x79, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x12, 0x0a, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x54, 0x78, 0x6e, 0x1a, 0x04, 0x2e, 0x45,
	0x72, 0x72, 0x12, 0x1a, 0x0a, 0x06, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x12, 0x0a, 0x2e, 0x53,
	0x69, 0x67, 0x6e, 0x65, 0x64, 0x54, 0x78, 0x6e, 0x1a, 0x04, 0x2e, 0x45, 0x72, 0x72, 0x12, 0x25,
	0x0a, 0x0b, 0x42, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x12, 0x10, 0x2e,
	0x42, 0x61, 0x74, 0x63, 0x68, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x54, 0x78, 0x6e, 0x73, 0x1a,
	0x04, 0x2e, 0x45, 0x72, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x73,
	0x54, 0x78, 0x6e, 0x73, 0x12, 0x0b, 0x2e, 0x54, 0x78, 0x6e, 0x73, 0x48, 0x61, 0x73, 0x68, 0x65,
	0x73, 0x1a, 0x04, 0x2e, 0x45, 0x72, 0x72, 0x12, 0x1b, 0x0a, 0x04, 0x50, 0x61, 0x63, 0x6b, 0x12,
	0x04, 0x2e, 0x55, 0x36, 0x34, 0x1a, 0x0d, 0x2e, 0x54, 0x78, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x25, 0x0a, 0x05, 0x52, 0x65, 0x73, 0x65, 0x74, 0x12, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x04, 0x2e, 0x45, 0x72, 0x72, 0x42, 0x0b, 0x5a, 0x09, 0x2e,
	0x2f, 0x67, 0x6f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var file_txpool_proto_goTypes = []interface{}{
	(*empty.Empty)(nil),     // 0: google.protobuf.Empty
	(*SignedTxn)(nil),       // 1: SignedTxn
	(*BatchSignedTxns)(nil), // 2: BatchSignedTxns
	(*TxnsHashes)(nil),      // 3: TxnsHashes
	(*U64)(nil),             // 4: U64
	(*Err)(nil),             // 5: Err
	(*TxnsResponse)(nil),    // 6: TxnsResponse
}
var file_txpool_proto_depIdxs = []int32{
	0, // 0: Txpool.PoolSize:input_type -> google.protobuf.Empty
	1, // 1: Txpool.BaseCheck:input_type -> SignedTxn
	1, // 2: Txpool.TripodsCheck:input_type -> SignedTxn
	1, // 3: Txpool.NecessaryCheck:input_type -> SignedTxn
	1, // 4: Txpool.Insert:input_type -> SignedTxn
	2, // 5: Txpool.BatchInsert:input_type -> BatchSignedTxns
	3, // 6: Txpool.RemovesTxns:input_type -> TxnsHashes
	4, // 7: Txpool.Pack:input_type -> U64
	0, // 8: Txpool.Reset:input_type -> google.protobuf.Empty
	4, // 9: Txpool.PoolSize:output_type -> U64
	5, // 10: Txpool.BaseCheck:output_type -> Err
	5, // 11: Txpool.TripodsCheck:output_type -> Err
	5, // 12: Txpool.NecessaryCheck:output_type -> Err
	5, // 13: Txpool.Insert:output_type -> Err
	5, // 14: Txpool.BatchInsert:output_type -> Err
	5, // 15: Txpool.RemovesTxns:output_type -> Err
	6, // 16: Txpool.Pack:output_type -> TxnsResponse
	5, // 17: Txpool.Reset:output_type -> Err
	9, // [9:18] is the sub-list for method output_type
	0, // [0:9] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_txpool_proto_init() }
func file_txpool_proto_init() {
	if File_txpool_proto != nil {
		return
	}
	file_base_types_proto_init()
	file_txn_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_txpool_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_txpool_proto_goTypes,
		DependencyIndexes: file_txpool_proto_depIdxs,
	}.Build()
	File_txpool_proto = out.File
	file_txpool_proto_rawDesc = nil
	file_txpool_proto_goTypes = nil
	file_txpool_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// TxpoolClient is the client API for Txpool service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TxpoolClient interface {
	PoolSize(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*U64, error)
	BaseCheck(ctx context.Context, in *SignedTxn, opts ...grpc.CallOption) (*Err, error)
	TripodsCheck(ctx context.Context, in *SignedTxn, opts ...grpc.CallOption) (*Err, error)
	NecessaryCheck(ctx context.Context, in *SignedTxn, opts ...grpc.CallOption) (*Err, error)
	Insert(ctx context.Context, in *SignedTxn, opts ...grpc.CallOption) (*Err, error)
	BatchInsert(ctx context.Context, in *BatchSignedTxns, opts ...grpc.CallOption) (*Err, error)
	RemovesTxns(ctx context.Context, in *TxnsHashes, opts ...grpc.CallOption) (*Err, error)
	Pack(ctx context.Context, in *U64, opts ...grpc.CallOption) (*TxnsResponse, error)
	Reset(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Err, error)
}

type txpoolClient struct {
	cc grpc.ClientConnInterface
}

func NewTxpoolClient(cc grpc.ClientConnInterface) TxpoolClient {
	return &txpoolClient{cc}
}

func (c *txpoolClient) PoolSize(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*U64, error) {
	out := new(U64)
	err := c.cc.Invoke(ctx, "/Txpool/PoolSize", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *txpoolClient) BaseCheck(ctx context.Context, in *SignedTxn, opts ...grpc.CallOption) (*Err, error) {
	out := new(Err)
	err := c.cc.Invoke(ctx, "/Txpool/BaseCheck", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *txpoolClient) TripodsCheck(ctx context.Context, in *SignedTxn, opts ...grpc.CallOption) (*Err, error) {
	out := new(Err)
	err := c.cc.Invoke(ctx, "/Txpool/TripodsCheck", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *txpoolClient) NecessaryCheck(ctx context.Context, in *SignedTxn, opts ...grpc.CallOption) (*Err, error) {
	out := new(Err)
	err := c.cc.Invoke(ctx, "/Txpool/NecessaryCheck", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *txpoolClient) Insert(ctx context.Context, in *SignedTxn, opts ...grpc.CallOption) (*Err, error) {
	out := new(Err)
	err := c.cc.Invoke(ctx, "/Txpool/Insert", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *txpoolClient) BatchInsert(ctx context.Context, in *BatchSignedTxns, opts ...grpc.CallOption) (*Err, error) {
	out := new(Err)
	err := c.cc.Invoke(ctx, "/Txpool/BatchInsert", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *txpoolClient) RemovesTxns(ctx context.Context, in *TxnsHashes, opts ...grpc.CallOption) (*Err, error) {
	out := new(Err)
	err := c.cc.Invoke(ctx, "/Txpool/RemovesTxns", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *txpoolClient) Pack(ctx context.Context, in *U64, opts ...grpc.CallOption) (*TxnsResponse, error) {
	out := new(TxnsResponse)
	err := c.cc.Invoke(ctx, "/Txpool/Pack", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *txpoolClient) Reset(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Err, error) {
	out := new(Err)
	err := c.cc.Invoke(ctx, "/Txpool/Reset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TxpoolServer is the server API for Txpool service.
type TxpoolServer interface {
	PoolSize(context.Context, *empty.Empty) (*U64, error)
	BaseCheck(context.Context, *SignedTxn) (*Err, error)
	TripodsCheck(context.Context, *SignedTxn) (*Err, error)
	NecessaryCheck(context.Context, *SignedTxn) (*Err, error)
	Insert(context.Context, *SignedTxn) (*Err, error)
	BatchInsert(context.Context, *BatchSignedTxns) (*Err, error)
	RemovesTxns(context.Context, *TxnsHashes) (*Err, error)
	Pack(context.Context, *U64) (*TxnsResponse, error)
	Reset(context.Context, *empty.Empty) (*Err, error)
}

// UnimplementedTxpoolServer can be embedded to have forward compatible implementations.
type UnimplementedTxpoolServer struct {
}

func (*UnimplementedTxpoolServer) PoolSize(context.Context, *empty.Empty) (*U64, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PoolSize not implemented")
}
func (*UnimplementedTxpoolServer) BaseCheck(context.Context, *SignedTxn) (*Err, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BaseCheck not implemented")
}
func (*UnimplementedTxpoolServer) TripodsCheck(context.Context, *SignedTxn) (*Err, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TripodsCheck not implemented")
}
func (*UnimplementedTxpoolServer) NecessaryCheck(context.Context, *SignedTxn) (*Err, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NecessaryCheck not implemented")
}
func (*UnimplementedTxpoolServer) Insert(context.Context, *SignedTxn) (*Err, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Insert not implemented")
}
func (*UnimplementedTxpoolServer) BatchInsert(context.Context, *BatchSignedTxns) (*Err, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchInsert not implemented")
}
func (*UnimplementedTxpoolServer) RemovesTxns(context.Context, *TxnsHashes) (*Err, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemovesTxns not implemented")
}
func (*UnimplementedTxpoolServer) Pack(context.Context, *U64) (*TxnsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Pack not implemented")
}
func (*UnimplementedTxpoolServer) Reset(context.Context, *empty.Empty) (*Err, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Reset not implemented")
}

func RegisterTxpoolServer(s *grpc.Server, srv TxpoolServer) {
	s.RegisterService(&_Txpool_serviceDesc, srv)
}

func _Txpool_PoolSize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TxpoolServer).PoolSize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Txpool/PoolSize",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TxpoolServer).PoolSize(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Txpool_BaseCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignedTxn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TxpoolServer).BaseCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Txpool/BaseCheck",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TxpoolServer).BaseCheck(ctx, req.(*SignedTxn))
	}
	return interceptor(ctx, in, info, handler)
}

func _Txpool_TripodsCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignedTxn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TxpoolServer).TripodsCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Txpool/TripodsCheck",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TxpoolServer).TripodsCheck(ctx, req.(*SignedTxn))
	}
	return interceptor(ctx, in, info, handler)
}

func _Txpool_NecessaryCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignedTxn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TxpoolServer).NecessaryCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Txpool/NecessaryCheck",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TxpoolServer).NecessaryCheck(ctx, req.(*SignedTxn))
	}
	return interceptor(ctx, in, info, handler)
}

func _Txpool_Insert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignedTxn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TxpoolServer).Insert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Txpool/Insert",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TxpoolServer).Insert(ctx, req.(*SignedTxn))
	}
	return interceptor(ctx, in, info, handler)
}

func _Txpool_BatchInsert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchSignedTxns)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TxpoolServer).BatchInsert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Txpool/BatchInsert",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TxpoolServer).BatchInsert(ctx, req.(*BatchSignedTxns))
	}
	return interceptor(ctx, in, info, handler)
}

func _Txpool_RemovesTxns_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TxnsHashes)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TxpoolServer).RemovesTxns(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Txpool/RemovesTxns",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TxpoolServer).RemovesTxns(ctx, req.(*TxnsHashes))
	}
	return interceptor(ctx, in, info, handler)
}

func _Txpool_Pack_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(U64)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TxpoolServer).Pack(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Txpool/Pack",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TxpoolServer).Pack(ctx, req.(*U64))
	}
	return interceptor(ctx, in, info, handler)
}

func _Txpool_Reset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TxpoolServer).Reset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Txpool/Reset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TxpoolServer).Reset(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _Txpool_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Txpool",
	HandlerType: (*TxpoolServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PoolSize",
			Handler:    _Txpool_PoolSize_Handler,
		},
		{
			MethodName: "BaseCheck",
			Handler:    _Txpool_BaseCheck_Handler,
		},
		{
			MethodName: "TripodsCheck",
			Handler:    _Txpool_TripodsCheck_Handler,
		},
		{
			MethodName: "NecessaryCheck",
			Handler:    _Txpool_NecessaryCheck_Handler,
		},
		{
			MethodName: "Insert",
			Handler:    _Txpool_Insert_Handler,
		},
		{
			MethodName: "BatchInsert",
			Handler:    _Txpool_BatchInsert_Handler,
		},
		{
			MethodName: "RemovesTxns",
			Handler:    _Txpool_RemovesTxns_Handler,
		},
		{
			MethodName: "Pack",
			Handler:    _Txpool_Pack_Handler,
		},
		{
			MethodName: "Reset",
			Handler:    _Txpool_Reset_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "txpool.proto",
}
